Property Getters and Setters - Summary
Two Types of Properties
Data Properties – Regular key-value pairs.
Accessor Properties – Functions that execute on getting/setting values but appear as normal properties.
Getters and Setters
Defined using get and set in an object literal.
Example:
js
Copy
Edit
let user = {
  name: "John",
  surname: "Smith",

  get fullName() {
    return `${this.name} ${this.surname}`;
  },

  set fullName(value) {
    [this.name, this.surname] = value.split(" ");
  }
};

user.fullName = "Alice Cooper";
alert(user.name); // Alice
alert(user.surname); // Cooper
The fullName property behaves like a regular property but is dynamically computed.
Accessor Descriptors
Unlike data properties, accessor properties use get and set instead of value and writable.
Example using defineProperty:
js
Copy
Edit
let user = {
  name: "John",
  surname: "Smith"
};

Object.defineProperty(user, 'fullName', {
  get() {
    return `${this.name} ${this.surname}`;
  },
  set(value) {
    [this.name, this.surname] = value.split(" ");
  }
});

alert(user.fullName); // John Smith
A property cannot have both get and value in the same descriptor.
Smarter Getters/Setters
Used to control property values.
Example:
js
Copy
Edit
let user = {
  get name() {
    return this._name;
  },
  set name(value) {
    if (value.length < 4) {
      alert("Name is too short!");
      return;
    }
    this._name = value;
  }
};

user.name = "Pete"; // Works
user.name = ""; // Error: Name is too short
Convention: _name (with underscore) is used for internal storage.
Using Accessors for Compatibility
Convert existing data properties into computed properties without breaking old code.
Example: Replacing age with birthday but keeping age accessible.
js
Copy
Edit
function User(name, birthday) {
  this.name = name;
  this.birthday = birthday;

  Object.defineProperty(this, "age", {
    get() {
      return new Date().getFullYear() - this.birthday.getFullYear();
    }
  });
}

let john = new User("John", new Date(1992, 6, 1));

alert(john.age); // Age is dynamically calculated
Benefit: Older code using age still works while new implementations use birthday.
Key Takeaways
✔ Getters/Setters allow computed property values.
✔ Accessor descriptors use get and set instead of value.
✔ Smarter accessors help enforce constraints on property values.
✔ Backward compatibility can be maintained using accessors.